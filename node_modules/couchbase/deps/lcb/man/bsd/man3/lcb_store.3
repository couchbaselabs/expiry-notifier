'\" t
.\"     Title: lcb_store
.\"    Author: Trond Norbye <trond.norbye@couchbase.com>
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/06/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LCB_STORE" "3" "08/06/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lcb_store \- store a document
.SH "SYNOPSIS"
.sp
cc [ flag \&... ] file\&... \-lcouchbase [ library \&... ]
.sp
.nf
#include <libcouchbase/couchbase\&.h>
.fi
.sp
.nf
lcb_error_t lcb_store(lcb_t instance,
                      const void *command_cookie,
                      lcb_size_t num,
                      const lcb_store_cmd_t *const *commands);
.fi
.SH "DESCRIPTION"
.sp
lcb_store() is used to store a document\&. If the library instance is using asynchronous mode (the default) this operation will return immediately and schedule the operations to be executed by the event loop, otherwise it will block until all commands are executed\&. command_cookie is is an opaque field that will be provided to the callback function\&. num is the number of entries in the commands array\&.
.sp
lcb_store_cmd_t is a structure defined in <libcouchbase/arguments\&.h>:
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    int version;              /* The enty in "v" to use */
    union {
        struct {
            const void *key;    /* The key this response belongs to */
            lcb_size_t nkey;    /* The number of bytes in the key */
            const void *bytes;  /* Document body */
            lcb_size_t nbytes;  /* Size of the document body */
            lcb_uint32_t flags; /* Document flag section */
            lcb_cas_t cas;      /* The object identifier of the object */
            lcb_datatype_t datatype; /* Datatype\&. Set to 0 */
            lcb_time_t exptime; /* Document expiry time */
            lcb_storage_t operation; /* storage operation */
            const void *hashkey; /* hash key if != key */
            lcb_size_t nhashkey; /* number of bytes in hash key */
        } v0;
    } v;
} lcb_store_cmd_t;
.fi
.if n \{\
.RE
.\}
.sp
Set cas to 0 unless you want to replace the document only if the cas matches\&.
.sp
Please note that using the another key for hashing may lead to an unbalanced cluster\&.
.sp
Upon completion the store callback as set by lcb_set_store_callback is called\&.
.SS "Storage operations"
.sp
The following storage operations is defined:
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_ADD        Add the item to the cache, but fail if the
               object exists alread
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_REPLACE    Replace the existing object in the cache
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_SET        Unconditionally set the object in the cache
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_APPEND     Append this object to the existing object
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_PREPEND    Prepend this  object to the existing object
.fi
.if n \{\
.RE
.\}
.SH "RETURN VALUES"
.sp
lcb_store() returns the LCB_SUCCESS on success, or a specific error code upon failure\&. See lcb_strerror(3) for more information\&.
.SH "EXAMPLES"
.sp
.if n \{\
.RS 4
.\}
.nf
#include <libcouchbase/couchbase\&.h>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.
lcb_t instance;
\&.\&.\&.
lcb_store_cmd_t *store = calloc(1, sizeof(*store));
store\->version = 0;
store\->v\&.v0\&.key = "my\-key";
store\->v\&.v0\&.nkey = strlen(store\->v\&.v0\&.key);
store\->v\&.v0\&.bytes = "{ value:666 }"
store\->v\&.v0\&.nbytes = strlen(store\->v\&.v0\&.bytes);
store\->v\&.v0\&.flags = 0xdeadcafe;
store\->v\&.v0\&.cas = 0x0000;
store\->v\&.v0\&.exptime = 0x666;
store\->v\&.v0\&.datatype = LCB_JSON;
store\->v\&.v0\&.operation = LCB_REPLACE;
lcb_store_cmd_st* commands[] = { store };
lcb_store(instance, NULL, 1, commands);
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.SH "ATTRIBUTES"
.sp
See lcb_attributes(5) for descriptions of the following attributes:
.TS
allbox tab(:);
ltB ltB.
T{
ATTRIBUTE TYPE
T}:T{
ATTRIBUTE VALUE
T}
.T&
lt lt
lt lt.
T{
.sp
Interface Stability
T}:T{
.sp
Committed
T}
T{
.sp
MT\-Level
T}:T{
.sp
MT\-Safe
T}
.TE
.sp 1
.SH "COPYRIGHT"
.sp
Copyright 2010\-2013 Couchbase, Inc\&.
.SH "SEE ALSO"
.sp
Learn more at http://www\&.couchbase\&.com/communities/c\&.
.sp
libcouchbase(3), lcb_get_store_callback(3), lcb_set_store_callback(3), lcb_attributes(5)
.SH "AUTHOR"
.PP
\fBTrond Norbye\fR <\&trond\&.norbye@couchbase\&.com\&>
.RS 4
Author.
.RE
