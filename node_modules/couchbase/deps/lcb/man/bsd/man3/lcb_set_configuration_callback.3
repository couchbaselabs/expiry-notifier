'\" t
.\"     Title: lcb_set_configuration_callback
.\"    Author: Trond Norbye <trond.norbye@couchbase.com>
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/02/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LCB_SET_CONFIGURATIO" "3" "08/02/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lcb_set_configuration_callback \- Set callback for cluster topology changes
.SH "SYNOPSIS"
.sp
cc [ flag \&... ] file\&... \-lcouchbase [ library \&... ]
.sp
.nf
#include <libcouchbase/couchbase\&.h>
.fi
.sp
.nf
lcb_configuration_callback lcb_set_configuration_callback(lcb_t instance, lcb_configuration_callback callback);
.fi
.SH "DESCRIPTION"
.sp
lcb_set_configuration_callback() is used to set a new callback function to handle configuration changes received from the cluster for the given instance\&.
.sp
The callback parameter is a the callback function to call whenever a new configuration is received from the cluster\&. Passing NULL as the callback function may be used to query the current callback function\&. The lcb_configuration_callback is a function with the following signature:
.sp
.if n \{\
.RS 4
.\}
.nf
void function(lcb_t instance, lcb_configuration_t config);
.fi
.if n \{\
.RE
.\}
.sp
instance is the libcouchbase instance that this response is called from\&. The config parameter is the type of configuration change:
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_CONFIGURATION_NEW        A new cluster configuration was
                             received\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_CONFIGURATION_CHANGED    Changes to the current cluster
                             configuration was received\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_CONFIGURATION_UNCHANGED  The current cluster sent out
                             notifications, but nothing new
                             in configuration\&.
.fi
.if n \{\
.RE
.\}
.SH "RETURN VALUES"
.sp
lcb_set_configuration_callback() returns the previous callback function\&.
.SH "EXAMPLES"
.sp
Example 1: Query the current callback
.sp
.if n \{\
.RS 4
.\}
.nf
#include <libcouchbase/couchbase\&.h>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.
lcb_t instance;
\&.\&.\&.
lcb_configuration_callback old;
old = lcb_set_configuration_callback(instance, NULL);
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
Example 2: Install custom callback
.sp
.if n \{\
.RS 4
.\}
.nf
#include <libcouchbase/couchbase\&.h>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.
static void callback(lcb_t instance, lcb_configuration_t config)
{
   switch (config) {
   case LCB_CONFIGURATION_NEW:
      fprintf(stdout, "Received new cluster configuration\en");
      break;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
case LCB_CONFIGURATION_CHANGED:
   fprintf(stderr, "Received cluster change notification0);
   break;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
   case LCB_CONFIGURATION_UNCHANGED:
      fprintf(stderr, "Received cluster notification0);
      break;
   default:
      fprintf(stderr, "Unknown configuration type received0);
   }
}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\&.\&.\&.
lcb_t instance;
\&.\&.\&.
lcb_set_configuration_callback(instance, callback);
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.SH "ATTRIBUTES"
.sp
See lcb_attributes(5) for descriptions of the following attributes:
.TS
allbox tab(:);
ltB ltB.
T{
ATTRIBUTE TYPE
T}:T{
ATTRIBUTE VALUE
T}
.T&
lt lt
lt lt.
T{
.sp
Interface Stability
T}:T{
.sp
Committed
T}
T{
.sp
MT\-Level
T}:T{
.sp
MT\-Safe
T}
.TE
.sp 1
.SH "COPYRIGHT"
.sp
Copyright 2010\-2013 Couchbase, Inc\&.
.SH "SEE ALSO"
.sp
Learn more at http://www\&.couchbase\&.com/communities/c\&.
.sp
libcouchbase(3), lcb_create(3), lcb_attributes(5)
.SH "AUTHOR"
.PP
\fBTrond Norbye\fR <\&trond\&.norbye@couchbase\&.com\&>
.RS 4
Author.
.RE
