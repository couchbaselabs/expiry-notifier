'\" t
.\"     Title: lcb_create_compat
.\"    Author: Trond Norbye <trond.norbye@couchbase.com>
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/02/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LCB_CREATE_COMPAT" "3" "08/02/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lcb_create_compat \- Create instance
.SH "SYNOPSIS"
.sp
cc [ flag \&... ] file\&... \-lcouchbase [ library \&... ]
.sp
.nf
#include <libcouchbase/couchbase\&.h>
.fi
.sp
.nf
lcb_error_t lcb_create_compat(lcb_compat_t type,
                              const void *specific,
                              lcb_t *instance,
                              struct lcb_io_opt_st *io);
.fi
.SH "DESCRIPTION"
.sp
lcb_create_compat creates an instance of libcouchbase with special configuration options\&.
.sp
The type parameter specifices the type of compatibility backend to use\&. The following types are defined:
.sp
.if n \{\
.RS 4
.\}
.nf
+LCB_MEMCACHED_CLUSTER+     Disable the REST configuration
                            protocol and connect to a fixed
                            list of memcached servers\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
+LCB_CACHED_CONFIG+         Use a cached copy of the cluster
                            topology to bypass the REST
                            bootstrapping\&.
.fi
.if n \{\
.RE
.\}
.sp
The content of the specific parameter depends on the type parameter\&.
.sp
See lcb_create() for more information about the instance and io parameter\&.
.SS "LCB_MEMCACHED_CLUSTER"
.sp
For LCB_MEMCACHED_CLUSTER the specific parameter points to a struct lcb_memcached_st:
.sp
.if n \{\
.RS 4
.\}
.nf
struct lcb_memcached_st {
    const char *serverlist;
    const char *username;
    const char *password;
};
.fi
.if n \{\
.RE
.\}
.sp
The serverlist is a list of server separated with a semicolon\&. username and password may be specified to use SASL authentication to the memcached cluster\&.
.SS "LCB_CACHED_CONFIG"
.sp
For LCB_MEMCACHED_CLUSTER the specific parameter points to a struct lcb_cached_config_st:
.sp
.if n \{\
.RS 4
.\}
.nf
struct lcb_cached_config_st {
    struct lcb_create_st createopt;
    const char *cachefile;
};
.fi
.if n \{\
.RE
.\}
.sp
See lcb_create() for a description of the internals of the createopt structure\&. The information in the createopt structure is used if the cachefile is missing or stale\&. The cachefile is used to specify a file (absolute or relative) where the cluster topology is stored\&. If the file exists the entire bootstrapping logic is skipped during startup, and delayed until an error is returned from the cluster indicating that the information in the cache is stale\&.
.SH "RETURN VALUES"
.sp
lcb_create() returns the LCB_SUCCESS on success, or a specific error code upon failure\&. See lcb_strerror(3) for more information\&.
.SH "EXAMPLES"
.sp
Example 1: Create an instance that may be used with a memcached cluster\&.
.sp
.if n \{\
.RS 4
.\}
.nf
struct lcb_memcached_st memcached;
lcb_t instance;
lcb_error_t err;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
memset(&memcached, 0, sizeof(memcached));
memcached\&.serverlist = "localhost:11211;localhost:11212";
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
err = lcb_create_compat(LCB_MEMCACHED_CLUSTER, &memcached,
                        &instance, NULL);
if (err != LCB_SUCCESS) {
    \&.\&.\&. error \&.\&.\&.
}
.fi
.if n \{\
.RE
.\}
.sp
Example 2: Create an instance that uses configuration caching:
.sp
.if n \{\
.RS 4
.\}
.nf
lcb_t instance;
lcb_error_t err;
struct lcb_cached_config_st config;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
memset(&config, 0, sizeof(config));
config\&.createopt\&.version = 1;
config\&.createopt\&.v\&.v1\&.host = "host1";
config\&.createopt\&.v\&.v1\&.user = "mybucket";
config\&.createopt\&.v\&.v1\&.passwd = "secret";
config\&.createopt\&.v\&.v1\&.bucket = "mybucket";
config\&.cachefile = "/var/tmp/couchbase\-config\-cache";
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
err = lcb_create_compat(LCB_CACHED_CONFIG, &config,
                        &instance, NULL);
if (err != LCB_SUCCESS) {
    \&.\&.\&. error \&.\&.\&.
}
.fi
.if n \{\
.RE
.\}
.SH "ATTRIBUTES"
.sp
See lcb_attributes(5) for descriptions of the following attributes:
.TS
allbox tab(:);
ltB ltB.
T{
ATTRIBUTE TYPE
T}:T{
ATTRIBUTE VALUE
T}
.T&
lt lt
lt lt.
T{
.sp
Interface Stability
T}:T{
.sp
Committed
T}
T{
.sp
MT\-Level
T}:T{
.sp
MT\-Safe
T}
.TE
.sp 1
.SH "COPYRIGHT"
.sp
Copyright 2010\-2013 Couchbase, Inc\&.
.SH "SEE ALSO"
.sp
Learn more at http://www\&.couchbase\&.com/communities/c\&.
.sp
libcouchbase(3), lcb_create(3), lcb_create_io_ops(3), lcb_attributes(5)
.SH "AUTHOR"
.PP
\fBTrond Norbye\fR <\&trond\&.norbye@couchbase\&.com\&>
.RS 4
Author.
.RE
