'\" t
.\"     Title: lcb_make_http_request
.\"    Author: Trond Norbye <trond.norbye@couchbase.com>
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 08/02/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LCB_MAKE_HTTP_REQUES" "3couchbase" "08/02/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lcb_make_http_request \- Create instance
.SH "SYNOPSIS"
.sp
cc [ flag \&... ] file\&... \-lcouchbase [ library \&... ]
.sp
.nf
#include <libcouchbase/couchbase\&.h>
.fi
.sp
.nf
lcb_error_t lcb_make_http_request(lcb_t instance,
                                  const void *command_cookie,
                                  lcb_http_type_t type,
                                  const lcb_http_cmd_t *cmd,
                                  lcb_http_request_t *request);
.fi
.SH "DESCRIPTION"
.sp
lcb_make_http_request() is used to execute HTTP requests\&. If the library instance is using asynchronous mode (the default) this operation will return immediately and schedule the operations to be executed by the event loop, otherwise it will block until all commands are executed\&. command_cookie is is an opaque field that will be provided to the callback function\&.
.sp
Type specifies the kind of HTTP request and may be one of the following:
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_HTTP_TYPE_VIEW          Execute a view request
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_HTTP_TYPE_MANAGEMENT    Perform management operation
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
LCB_HTTP_TYPE_RAW           Execute an arbitrary HTTP request
.fi
.if n \{\
.RE
.\}
.sp
lcb_http_cmd_t is a structure defined in <libcouchbase/arguments\&.h>:
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct lcb_http_cmd_st {
    int version;              /* The enty in "v" to use */
    union {
        struct {
            const char *path;
            lcb_size_t npath;
            const void *body;
            lcb_size_t nbody;
            lcb_http_method_t method;
            int chunked;
            const char *content_type;
        } v0;
        struct {
            const char *path;
            lcb_size_t npath;
            const void *body;
            lcb_size_t nbody;
            lcb_http_method_t method;
            int chunked;
            const char *content_type;
            const char *host;
            const char *username;
            const char *password;
        } v1;
    } v;
};
.fi
.if n \{\
.RE
.\}
.sp
LCB_HTTP_TYPE_VIEW and LCB_HTTP_TYPE_MANAGEMENT should use version 0 of the struct above\&. LCB_HTTP_TYPE_RAW must use version 1 which contains the extra fields: host, username and password\&. The rest of the fields are identical\&.
.sp
path and npath specifies the document to operate\&.
.sp
body and nbody contains the data for HTTP POST requests\&.
.sp
method contains the type of HTTP request: LCB_HTTP_METHOD_GET, LCB_HTTP_METHOD_POST, LCB_HTTP_METHOD_PUT or LCB_HTTP_METHOD_DELETE
.sp
chunked is set to a non\-zero value to use chunked http mode
.sp
content_type is used to specify the content type in the HTTP request\&.
.sp
The last parameter to lcb_make_http_request is an output parameter to store an identifier for the HTTP request\&. The request parameter may be used to cancel the request with lcb_cancel_http_request(3couchbase)\&.
.SH "RETURN VALUES"
.SH "EXAMPLES"
.sp
Example 1: Fetch first 10 docs from \fI_design/test/_view/all\fR view
.sp
.if n \{\
.RS 4
.\}
.nf
lcb_http_request_t req;
lcb_http_cmd_t *cmd = calloc(1, sizeof(lcb_http_cmd_t));
cmd\->version = 0;
cmd\->v\&.v0\&.path = "_design/test/_view/all?limit=10";
cmd\->v\&.v0\&.npath = strlen(item\->v\&.v0\&.path);
cmd\->v\&.v0\&.body = NULL;
cmd\->v\&.v0\&.nbody = 0;
cmd\->v\&.v0\&.method = LCB_HTTP_METHOD_GET;
cmd\->v\&.v0\&.chunked = 1;
cmd\->v\&.v0\&.content_type = "application/json";
lcb_error_t err = lcb_make_http_request(instance, NULL,
                                        LCB_HTTP_TYPE_VIEW,
                                        &cmd, &req);
if (err != LCB_SUCCESS) {
    \&.\&.\&. failed to schedule request \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
Example 2: The same as above but with POST filter
.sp
.if n \{\
.RS 4
.\}
.nf
lcb_http_request_t req;
lcb_http_cmd_t *cmd = calloc(1, sizeof(lcb_http_cmd_t));
cmd\->version = 0;
cmd\->v\&.v0\&.path = "_design/test/_view/all?limit=10";
cmd\->v\&.v0\&.npath = strlen(item\->v\&.v0\&.path);
cmd\->v\&.v0\&.body = "{\e"keys\e": [\e"test_1000\e", \e"test_10002\e"]}"
cmd\->v\&.v0\&.nbody = strlen(item\->v\&.v0\&.body);
cmd\->v\&.v0\&.method = LCB_HTTP_METHOD_POST;
cmd\->v\&.v0\&.chunked = 1;
cmd\->v\&.v0\&.content_type = "application/json";
lcb_error_t err = lcb_make_http_request(instance, NULL,
                                        LCB_HTTP_TYPE_VIEW,
                                        &cmd, &req);
if (err != LCB_SUCCESS) {
    \&.\&.\&. failed to schedule request \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
Example 3: Delete bucket via REST management API
.sp
.if n \{\
.RS 4
.\}
.nf
lcb_http_request_t req;
lcb_http_cmd_t *cmd = calloc(1, sizeof(lcb_http_cmd_t));
cmd\->version = 0;
cmd\->v\&.v0\&.path = "/pools/default/buckets/mybucket");
cmd\->v\&.v0\&.npath = strlen(cmd\->v\&.v0\&.path);
cmd\->v\&.v0\&.body = NULL;
cmd\->v\&.v0\&.nbody = 0;
cmd\->v\&.v0\&.method = LCB_HTTP_METHOD_DELETE;
cmd\->v\&.v0\&.chunked = false;
cmd\->v\&.v0\&.content_type = "application/x\-www\-form\-urlencoded";
lcb_error_t err = lcb_make_http_request(instance, NULL,
                                        LCB_HTTP_TYPE_MANAGEMENT,
                                        &cmd, &req);
if (err != LCB_SUCCESS) {
    \&.\&.\&. failed to schedule request \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
Example 4: Save design document \(oq_design/test\(cq with trivial \(oqall\(cq view
.sp
.if n \{\
.RS 4
.\}
.nf
const char *docid = "_design/test";
const char *doc = "{\e"views\e":{\e"all\e":{\e"map\e":\e"function (doc, meta) { emit(meta\&.id, null); }\e"}}}";
lcb_http_cmd_t cmd;
lcb_http_request_t req;
cmd\&.version = 0;
cmd\&.v\&.v0\&.path = docid;
cmd\&.v\&.v0\&.npath = strlen(docid);
cmd\&.v\&.v0\&.body = doc;
cmd\&.v\&.v0\&.nbody = strlen(doc);
cmd\&.v\&.v0\&.method = LCB_HTTP_METHOD_PUT;
cmd\&.v\&.v0\&.content_type = "application/json";
lcb_error_t err = lcb_make_http_request(instance, NULL,
                                        LCB_HTTP_TYPE_VIEW,
                                        &cmd, &req);
if (err != LCB_SUCCESS) {
    \&.\&.\&. failed to schedule request \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.SH "ATTRIBUTES"
.sp
See lcb_attributes(5) for descriptions of the following attributes:
.TS
allbox tab(:);
ltB ltB.
T{
ATTRIBUTE TYPE
T}:T{
ATTRIBUTE VALUE
T}
.T&
lt lt
lt lt.
T{
.sp
Interface Stability
T}:T{
.sp
Committed
T}
T{
.sp
MT\-Level
T}:T{
.sp
MT\-Safe
T}
.TE
.sp 1
.SH "COPYRIGHT"
.sp
Copyright 2010\-2013 Couchbase, Inc\&.
.SH "SEE ALSO"
.sp
Learn more at http://www\&.couchbase\&.com/communities/c\&.
.sp
libcouchbase(3lib), lcb_create(3couchbase), lcb_cancel_http_request(3couchbase), lcb_set_http_data_callback(3couchbase), lcb_set_http_complete_callback(3couchbase), lcb_attributes(5)
.SH "AUTHOR"
.PP
\fBTrond Norbye\fR <\&trond\&.norbye@couchbase\&.com\&>
.RS 4
Author.
.RE
